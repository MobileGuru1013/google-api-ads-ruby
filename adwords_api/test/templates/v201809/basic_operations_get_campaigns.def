def setup_mocks()
  $api_config = {
    :service => {:environment => 'PRODUCTION'},
    :authentication => {
      :method => 'OAuth2',
      :oauth2_client_id => 'client_id123',
      :oauth2_client_secret => 'client_secret123',
      :developer_token => 'dev_token123',
      :client_customer_id => '123-456-7890',
      :user_agent => 'ruby-tests',
      :oauth2_token => {
        :refresh_token => 'refresh_token123'
      }
    }
  }

  stub_request(:post, "https://accounts.google.com/o/oauth2/auth").
    with(:body => {"client_id"=>"client_id123", "client_secret"=>"client_secret123", "refresh_token"=>"refresh_token123", "grant_type"=>"refresh_token"}).
    to_return(:status => 200, :body => '{"access_token":"access_token123","token_type":"Bearer","expires_in":"3600"}\n', :headers => {})

  stub_request(:post, "https://adwords.google.com/api/adwords/cm/v201809/CampaignService").
    with(
      :body =>
      # autogenerated code
        {"env:Envelope"=>
          {"env:Header"=>
            {"wsdl:RequestHeader"=>
              {"userAgent"=>/ruby-tests.*AwApi\-Ruby.*Common\-Ruby/,
               "developerToken"=>"dev_token123",
               "clientCustomerId"=>"123-456-7890",
               "xmlns"=>"https://adwords.google.com/api/adwords/cm/v201809"}},
           "env:Body"=>
            {"get"=>
              {"serviceSelector"=>
                {"fields"=>["Id", "Name", "Status"],
                 "ordering"=>{"field"=>"Name", "sortOrder"=>"ASCENDING"},
                 "paging"=>{"startIndex"=>"0", "numberResults"=>"5"}},
               "xmlns"=>"https://adwords.google.com/api/adwords/cm/v201809"}},
           "xmlns:xsd"=>"http://www.w3.org/2001/XMLSchema",
           "xmlns:xsi"=>"http://www.w3.org/2001/XMLSchema-instance",
           "xmlns:wsdl"=>"https://adwords.google.com/api/adwords/cm/v201809",
           "xmlns:env"=>"http://schemas.xmlsoap.org/soap/envelope/"}},
      # end of auto-generated code.
      :headers => {
        'SOAPAction' => '"get"',
        'Content-Type' => 'text/xml;charset=UTF-8'
      }
    ).
    to_return(
      :status => 200,
      :body => '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                <soap:Header>
                  <ResponseHeader xmlns="https://adwords.google.com/api/adwords/cm/v201809">
                    <requestId>0004c</requestId>
                    <serviceName>CampaignService</serviceName>
                    <methodName>get</methodName>
                    <operations>42</operations>
                    <responseTime>84</responseTime>
                    <units>42</units>
                  </ResponseHeader>
                </soap:Header>
                <soap:Body>
                  <getResponse xmlns="https://adwords.google.com/api/adwords/cm/v201809">
                    <rval>
                      <totalNumEntries>2</totalNumEntries>
                      <Page.Type>CampaignPage</Page.Type>
                      <totalBudget>
                        <period>DAILY</period><amount><ComparableValue.Type>Money</ComparableValue.Type>
                        <microAmount>0</microAmount></amount>
                      </totalBudget>
                      <entries>
                        <id>15</id><name>Campaign name 1</name><status>PAUSED</status><campaignStats><network>ALL</network>
                        <Stats.Type>CampaignStats</Stats.Type></campaignStats><frequencyCap><impressions>0</impressions></frequencyCap>
                      </entries>
                      <entries>
                        <id>16</id><name>Campaign name 2</name><status>ACTIVE</status><campaignStats><network>ALL</network>
                        <Stats.Type>CampaignStats</Stats.Type></campaignStats><frequencyCap><impressions>150</impressions></frequencyCap>
                      </entries>
                    </rval>
                  </getResponse>
                </soap:Body>
                </soap:Envelope>',
      :headers => {'content-type' => 'text/xml;'}
    )
end

def run_asserts()
  assert_equal(2, $latest_result[:total_num_entries])
  assert_equal('CampaignPage', $latest_result[:page_type])
  entries = $latest_result[:entries]
  assert_equal(2, entries.size)

  if entries[0][:id] == 15
    assert_campaign_15(entries[0])
    assert_campaign_16(entries[1])
  else
    assert_campaign_15(entries[1])
    assert_campaign_16(entries[0])
  end
end

def assert_campaign_15(entry)
  assert_equal(15, entry[:id])
  assert_equal('Campaign name 1', entry[:name])
  assert_equal('PAUSED', entry[:status])
  assert_equal({:network=>"ALL", :stats_type=>"CampaignStats"}, entry[:campaign_stats])
  assert_equal({:impressions=>0}, entry[:frequency_cap])
end

def assert_campaign_16(entry)
  assert_equal(16, entry[:id])
  assert_equal('Campaign name 2', entry[:name])
  assert_equal('ACTIVE', entry[:status])
  assert_equal({:network=>"ALL", :stats_type=>"CampaignStats"}, entry[:campaign_stats])
  assert_equal({:impressions=>150}, entry[:frequency_cap])
end
