def setup_mocks()
  $api_config = {
    :service => {:environment => 'PRODUCTION'},
    :authentication => {
      :method => 'OAuth2',
      :oauth2_client_id => 'client_id123',
      :oauth2_client_secret => 'client_secret123',
      :developer_token => 'dev_token123',
      :client_customer_id => '123-456-7890',
      :user_agent => 'ruby-tests',
      :oauth2_token => {
        :refresh_token => 'refresh_token123'
      }
    }
  }

  stub_request(:post, "https://accounts.google.com/o/oauth2/auth").
    with(:body => {"client_id"=>"client_id123", "client_secret"=>"client_secret123", "refresh_token"=>"refresh_token123", "grant_type"=>"refresh_token"}).
    to_return(:status => 200, :body => '{"access_token":"access_token123","token_type":"Bearer","expires_in":"3600"}\n', :headers => {})

  stub_request(:post, "https://adwords.google.com/api/adwords/cm/v201809/AdGroupCriterionService").
    with(
      :body =>
      # autogenerated code
        {"env:Envelope"=>
          {"env:Header"=>
            {"wsdl:RequestHeader"=>
              {"userAgent"=>/ruby-tests.*AwApi\-Ruby.*Common\-Ruby/,
               "developerToken"=>"dev_token123",
               "clientCustomerId"=>"123-456-7890",
               "xmlns"=>"https://adwords.google.com/api/adwords/cm/v201809"}},
           "env:Body"=>
            {"mutate"=>
              {"operations"=>
                {"operator"=>"SET",
                 "operand"=>
                  {"adGroupId"=>"0",
                   "criterion"=>{"id"=>"0"},
                   "biddingStrategyConfiguration"=>
                    {"bids"=>
                      {"bid"=>{"microAmount"=>"1000000"}, "xsi:type"=>"CpcBid"}},
                   "xsi:type"=>"BiddableAdGroupCriterion"}},
               "xmlns"=>"https://adwords.google.com/api/adwords/cm/v201809"}},
           "xmlns:xsd"=>"http://www.w3.org/2001/XMLSchema",
           "xmlns:xsi"=>"http://www.w3.org/2001/XMLSchema-instance",
           "xmlns:wsdl"=>"https://adwords.google.com/api/adwords/cm/v201809",
           "xmlns:env"=>"http://schemas.xmlsoap.org/soap/envelope/"}},
      # end of auto-generated code.
      :headers => {
        'SOAPAction' => '"mutate"',
        'Content-Type' => 'text/xml;charset=UTF-8'
      }
    ).
    to_return(
      :status => 200,
      :body => '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                <soap:Header>
                  <ResponseHeader xmlns="https://adwords.google.com/api/adwords/cm/v201809">
                    <requestId>0004c</requestId>
                    <serviceName>AdGroupCriterionService</serviceName>
                    <methodName>mutate</methodName>
                    <operations>1</operations>
                    <responseTime>102</responseTime>
                  </ResponseHeader>
                </soap:Header>
                <soap:Body>
                  <mutateResponse xmlns="https://adwords.google.com/api/adwords/cm/v201809">
                    <rval>
                      <ListReturnValue.Type>AdGroupCriterionReturnValue</ListReturnValue.Type>
                      <value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="BiddableAdGroupCriterion">
                        <adGroupId>1234</adGroupId>
                        <criterion xsi:type="Keyword">
                          <id>5678</id>
                          <type>KEYWORD</type>
                          <Criterion.Type>Keyword</Criterion.Type>
                          <text>test text</text>
                          <matchType>BROAD</matchType>
                        </criterion>
                        <AdGroupCriterion.Type>BiddableAdGroupCriterion</AdGroupCriterion.Type>
                        <userStatus>PAUSED</userStatus>
                        <systemServingStatus>ELIGIBLE</systemServingStatus>
                        <approvalStatus>PENDING_REVIEW</approvalStatus>
                        <biddingStrategyConfiguration>
                          <biddingStrategyType>MANUAL_CPC</biddingStrategyType>
                          <biddingStrategySource>CAMPAIGN</biddingStrategySource>
                          <biddingScheme xsi:type="ManualCpcBiddingScheme">
                            <BiddingScheme.Type>ManualCpcBiddingScheme</BiddingScheme.Type>
                            <enhancedCpcEnabled>false</enhancedCpcEnabled>
                          </biddingScheme>
                          <bids xsi:type="CpcBid">
                            <Bids.Type>CpcBid</Bids.Type>
                            <bid>
                              <ComparableValue.Type>Money</ComparableValue.Type>
                              <microAmount>1000000</microAmount>
                            </bid>
                            <cpcBidSource>CRITERION</cpcBidSource>
                          </bids>
                          <bids xsi:type="CpmBid">
                            <Bids.Type>CpmBid</Bids.Type>
                            <bid>
                              <ComparableValue.Type>Money</ComparableValue.Type>
                              <microAmount>10000</microAmount>
                            </bid>
                            <cpmBidSource>ADGROUP</cpmBidSource>
                          </bids>
                        </biddingStrategyConfiguration>
                        <finalUrls>
                          <urls>http://example.com/mars</urls>
                        </finalUrls>
                      </value>
                    </rval>
                  </mutateResponse>
                </soap:Body>
                </soap:Envelope>',
      :headers => {'content-type' => 'text/xml;'}
    )
end

def run_asserts()
  assert_equal(1, $latest_result[:value].size)
  ad_group_criterion = $latest_result[:value].first
  assert_equal(1234, ad_group_criterion[:ad_group_id])
  assert_equal(5678, ad_group_criterion[:criterion][:id])
  assert_equal("test text", ad_group_criterion[:criterion][:text])
end
