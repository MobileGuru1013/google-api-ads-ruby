def setup_mocks()
  file_name = 'privatekey.json'
  file_contents = '{"private_key":"-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC57qKyQpgXHHgH\ny8SjFKQzn8v7+ZUmsD/EoQB4WMe63bul2MEIuv6ASAVZk02vbWNx9CmcAATo7R9d\nIs8U9ZRaQ6HSG+WXVw/UKAJ2kTlEjOdnXvER0cDbGAZLlMew2pGhas9U/EGPDZ5z\n2iTtbRpwSzNHSR7jIpxdfrVj5yEcIHW4mOfTeprmpcQwYT5VsacvYYnW2Eseh/AF\nHU5gbvj+nXbYJrs3VXBTOjy/D4H1KXnb//EIEJqZtUTDu4xpF05F8jUvwoRvROrN\nktrzbjE+Mb8YNTwMBHOLFrVb6LmGPWbYrfs9ZZ59cdqbqhKS+iCaAlyk1Oi2Oand\nX3D0I/tHAgMBAAECggEAM2+SzqGhlXMouW9jfIHvUuC3+4L2AffsDCdGDATza/x/\nNsgZzqJ8WVyTLk6TxR4LzrBu+lr/ALjoXkmM5A1z9uySzZ8uConpNRXEaKyQHSil\ns3EOW5GdOn8Q7sO/4mr0sqTrqmUGdd6coQwN/yiZkcsb6nKN+uPOQgcVgwejnzXa\n0q0At2JFR3zxWz+JyGRvpR+SejHzugJD4EXEgQpXvzzt7Yw/pUWY5uM1Mor1jOCQ\nxLAi5uI3BIe0yqTnFAQgQhz5+jtDmzwm0kl2N0ADprTWm4tmrBfE6d035Aqdctcp\nWUFrHiLeF8drqBm+d8qBsdqkM8ytCbJcBK6p68vOUQKBgQDh4KLKt+dIIH3GwUe/\nXq+evlZarEL8Pou7tZI4BqCk98glOESAPPYbajSRaS4AJAVJ347nOqwWZE+SnQDG\n8T2igDUWGmFPwX62Q9/W0YRc4hsOAcylFV+vEB8XgtddesbhCQPkwHJ4wWJRFmFy\n2rPp1tuXwzCG4y19WTascYMzRQKBgQDSukh4tuJb7WhIGWCI0mB/MvQzvp0hv0hm\nF1JQHpLe8pNGsFEy2f3CIzlnlw7GeM2xHLUo/l/F/5bCWzui+Tsud0wof7AG+okJ\nGQtCtA3+LHfgf3aJlajZIRqqn4Gt3XqWL03ZYchcHd1G77PJ3Hb+FBy289+BgUWI\nypwQo973GwKBgQCeVAmIM1RpGG1RjlWubL6JdT2unSTvDyB/WQy/PNYKDK08ea56\nfUC9grqKWsGl05npaE0RA+1wXKvyRx8uVBcx+tA7SA6CC024kOcr+vze5pa0QMqj\nxNGnMpO4tTwlCFSzlNAn3kXfIx65XAi+q1KFTNfsDyPKyR8vyAMs6PxgSQKBgH35\nEp3nZoZh9Dc1xHnGmh0wTsAoMTMdcKBnTLPMsyxIgzZ87O2jV4mZGRYOPaz0RrKc\nYMgy2Po6gtuJQqt4pqJuer6zJn3lg8pGiG7FyJ+r4bX5PNme+CNlINXjKNjRUBk8\nCiPryqUWzVM8tJP2EcRuLYRJYdG/f9v4kzd3XzEFAoGBAIoxsaECx6U7yyswlBtR\nrPMlVbJTN7EEHDEYfaF009jOeu97lk2dhuNSb7ZK1suqGQcZznaDjUJER1PSOjft\ns8piH4THI9MhTLNSZS8q0HcB2lbbANV+GpqT5nt/5Sl0qi4KcXBRE0PkqsYMAKTt\nBjiDgUEVFb0ma/qpcbsRfQPM\n-----END PRIVATE KEY-----\n","client_email":"client email"}'
  key_secret = 'not-secret'

  $api_config = {
    :authentication => {
      :method => 'OAUTH2_SERVICE_ACCOUNT',
      :oauth2_issuer => 'not-valid@developer.gserviceaccount.com',
      :oauth2_secret => key_secret,
      :oauth2_keyfile => file_name,
      :developer_token => 'dev_token123',
      :client_customer_id => '123-456-7890',
      :user_agent => 'ruby-tests'
    }
  }

  stub(File).file?(file_name) { true }
  stub.proxy(File).file?

  stub(File).read(file_name) { file_contents }
  stub.proxy(File).read

  key = mock!.key { 'pkcs12 key' }
  stub(OpenSSL::PKCS12).new.with(file_contents, key_secret) { key }

  stub_request(:post, "https://accounts.google.com/o/oauth2/token").
    with(:body => hash_including({"grant_type"=>"urn:ietf:params:oauth:grant-type:jwt-bearer"}),
         :headers => {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Content-Type'=>'application/x-www-form-urlencoded', 'User-Agent'=>/Faraday/}).
    with(:body => /assertion=eyJhbGciOiJSUzI1NiJ9/).
    to_return(:status => 200,
        :body => "{\n  \"access_token\" : \"ab01.CBEF2GHi3JKlMnOpqRstUvW4X-YzaBcdEFG5IjKLMNPPqRStuV\",\n  \"token_type\" : \"Bearer\",\n  \"expires_in\" : 3600\n}",
        :headers => {"Content-Type"=>"application/json"})

  stub_request(:post, "https://adwords.google.com/api/adwords/cm/v201809/CampaignService").
    with(
      :body =>
      # autogenerated code
        {"env:Envelope"=>
          {"env:Header"=>
            {"wsdl:RequestHeader"=>
              {"userAgent"=>/ruby-tests.*AwApi\-Ruby.*Common\-Ruby/,
               "developerToken"=>"dev_token123",
               "clientCustomerId"=>"123-456-7890",
               "xmlns"=>"https://adwords.google.com/api/adwords/cm/v201809"}},
           "env:Body"=>
            {"get"=>
              {"serviceSelector"=>
                {"fields"=>["Id", "Name", "Status"],
                 "ordering"=>{"field"=>"Name", "sortOrder"=>"ASCENDING"}},
               "xmlns"=>"https://adwords.google.com/api/adwords/cm/v201809"}},
           "xmlns:xsd"=>"http://www.w3.org/2001/XMLSchema",
           "xmlns:xsi"=>"http://www.w3.org/2001/XMLSchema-instance",
           "xmlns:wsdl"=>"https://adwords.google.com/api/adwords/cm/v201809",
           "xmlns:env"=>"http://schemas.xmlsoap.org/soap/envelope/"}},
      # end of auto-generated code.
      :headers => {
        'SOAPAction' => '"get"',
        'Content-Type' => 'text/xml;charset=UTF-8',
        'Authorization' => 'Bearer ab01.CBEF2GHi3JKlMnOpqRstUvW4X-YzaBcdEFG5IjKLMNPPqRStuV'
      }
    ).
    to_return(
      :status => 200,
      :body => '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                <soap:Header>
                  <ResponseHeader xmlns="https://adwords.google.com/api/adwords/cm/v201809">
                    <requestId>0004c</requestId>
                    <serviceName>CampaignService</serviceName>
                    <methodName>get</methodName>
                    <operations>42</operations>
                    <responseTime>84</responseTime>
                    <units>42</units>
                  </ResponseHeader>
                </soap:Header>
                <soap:Body>
                  <getResponse xmlns="https://adwords.google.com/api/adwords/cm/v201809">
                    <rval>
                      <totalNumEntries>2</totalNumEntries>
                      <Page.Type>CampaignPage</Page.Type>
                      <totalBudget>
                        <period>DAILY</period><amount><ComparableValue.Type>Money</ComparableValue.Type>
                        <microAmount>0</microAmount></amount>
                      </totalBudget>
                      <entries>
                        <id>15</id><name>Campaign name 1</name><status>PAUSED</status><campaignStats><network>ALL</network>
                        <Stats.Type>CampaignStats</Stats.Type></campaignStats><frequencyCap><impressions>0</impressions></frequencyCap>
                      </entries>
                      <entries>
                        <id>16</id><name>Campaign name 2</name><status>ACTIVE</status><campaignStats><network>ALL</network>
                        <Stats.Type>CampaignStats</Stats.Type></campaignStats><frequencyCap><impressions>150</impressions></frequencyCap>
                      </entries>
                    </rval>
                  </getResponse>
                </soap:Body>
                </soap:Envelope>',
      :headers => {'content-type' => 'text/xml;'}
    )
end

def run_asserts()
  assert_equal(2, $latest_result[:total_num_entries])
  assert_equal('CampaignPage', $latest_result[:page_type])
  entries = $latest_result[:entries]
  assert_equal(2, entries.size)

  if entries[0][:id] == 15
    assert_campaign_15(entries[0])
    assert_campaign_16(entries[1])
  else
    assert_campaign_15(entries[1])
    assert_campaign_16(entries[0])
  end
end

def assert_campaign_15(entry)
  assert_equal(15, entry[:id])
  assert_equal('Campaign name 1', entry[:name])
  assert_equal('PAUSED', entry[:status])
  assert_equal({:network=>"ALL", :stats_type=>"CampaignStats"}, entry[:campaign_stats])
  assert_equal({:impressions=>0}, entry[:frequency_cap])
end

def assert_campaign_16(entry)
  assert_equal(16, entry[:id])
  assert_equal('Campaign name 2', entry[:name])
  assert_equal('ACTIVE', entry[:status])
  assert_equal({:network=>"ALL", :stats_type=>"CampaignStats"}, entry[:campaign_stats])
  assert_equal({:impressions=>150}, entry[:frequency_cap])
end
